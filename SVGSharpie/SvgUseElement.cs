using System;
using System.Collections.Generic;
using System.Xml.Serialization;

namespace SVGSharpie
{
    /// <inheritdoc />
    /// <summary>
    /// The ‘use’ element references another element and indicates that the graphical contents of that element 
    /// is included/drawn at that given point in the document.
    /// The ‘use’ element has optional attributes ‘x’, ‘y’, ‘width’ and ‘height’ which are used to map the graphical 
    /// contents of the referenced element onto a rectangular region within the current coordinate system.
    /// </summary>
    [XmlType("use", Namespace = SvgDocument.SvgNs)]
    public sealed class SvgUseElement : SvgGraphicsElement
    {
        /// <summary>
        /// Gets or sets x-axis coordinate of one corner of the rectangular region into which the referenced element is placed.  
        /// If the attribute is not specified, the effect is as if a value of "0" were specified.
        /// </summary>
        [XmlIgnore]
        public SvgLength? X { get; set; }

        /// <summary>
        /// Gets or sets The y-axis coordinate of one corner of the rectangular region into which the referenced element is placed.
        /// If the attribute is not specified, the effect is as if a value of "0" were specified.
        /// </summary>
        [XmlIgnore]
        public SvgLength? Y { get; set; }

        /// <summary>
        /// Gets or sets the width of the rectangular region into which the referenced element is placed.
        /// A value of zero disables rendering of this element.
        /// </summary>
        [XmlIgnore]
        public SvgLength? Width { get; set; }

        /// <summary>
        /// Gets or sets height of the rectangular region into which the referenced element is placed.
        /// A value of zero disables rendering of this element.
        /// </summary>
        [XmlIgnore]
        public SvgLength? Height { get; set; }

        /// <summary>
        /// Gets a value indicating whether the rendering of the element is disabled, a width or height specified as 0.
        /// </summary>
        public bool IsRenderingDisabled =>
            (Width.HasValue && Width.Value.Value <= 0) ||
            (Height.HasValue && Height.Value.Value <= 0);

        /// <summary>
        /// Gets or sets the ‘x’ attribute on the given ‘use’ element.
        /// </summary>
        [XmlAttribute("x")]
        public string XAsString
        {
            get => X?.ToString() ?? string.Empty;
            set => X = !string.IsNullOrEmpty(value) ? (SvgLength?)new SvgLength(value, this, SvgLengthDirection.Horizontal) : null;
        }

        /// <summary>
        /// Gets or sets the ‘y’ attribute on the given ‘use’ element.
        /// </summary>
        [XmlAttribute("y")]
        public string YAsString
        {
            get => Y?.ToString() ?? string.Empty;
            set => Y = !string.IsNullOrEmpty(value) ? (SvgLength?)new SvgLength(value, this, SvgLengthDirection.Vertical) : null;
        }

        /// <summary>
        /// Gets or sets the ‘width’ attribute on the given ‘use’ element.
        /// </summary>
        [XmlAttribute("width")]
        public string WidthAsString
        {
            get => Width?.ToString() ?? string.Empty;
            set => Width = !string.IsNullOrEmpty(value) ? (SvgLength?)new SvgLength(value, this, SvgLengthDirection.Horizontal) : null;
        }

        /// <summary>
        /// Gets or sets the ‘height’ attribute on the given ‘use’ element.
        /// </summary>
        [XmlAttribute("height")]
        public string HeightAsString
        {
            get => Height?.ToString() ?? string.Empty;
            set => Height = !string.IsNullOrEmpty(value) ? (SvgLength?)new SvgLength(value, this, SvgLengthDirection.Vertical) : null;
        }
        
        /// <summary>
        /// Gets the element generated by the current use element
        /// </summary>
        [XmlIgnore]
        public SvgElement GeneratedElement { get; private set; }

        /// <summary>
        /// Gets or sets the A IRI reference to an element/fragment within the current SVG document
        /// </summary>
        [XmlAttribute("href", Namespace = SvgDocument.XLinkNs)]
        public string Href { get; set; }

        /// <inheritdoc cref="SvgElement.GetBBox"/>
        public override SvgRect? GetBBox()
        {
            var genBounds = GeneratedElement.GetBBox();
            var x = (X?.Value ?? 0) + (genBounds?.X ?? 0);
            var y = (Y?.Value ?? 0) + (genBounds?.Y ?? 0);
            var width = Width?.Value ?? (genBounds?.Width ?? 0);
            var height = Height?.Value ?? (genBounds?.Height ?? 0);
            return new SvgRect(x, y, width, height);
        }

        /// <inheritdoc cref="SvgElement.Accept"/>
        public override void Accept(SvgElementVisitor visitor) => visitor.VisitUseElement(this);

        /// <inheritdoc cref="SvgElement.Accept"/>
        public override TResult Accept<TResult>(SvgElementVisitor<TResult> visitor) => visitor.VisitUseElement(this);

        /// <inheritdoc cref="SvgElement.GetChildren"/>
        internal override IEnumerable<SvgElement> GetChildren()
        {
            if (GeneratedElement != null)
            {
                yield return GeneratedElement;
            }
        }

        protected override SvgElement CreateClone()
            => new SvgUseElement
            {
                X = X,
                Y = Y,
                Width = Width,
                Height = Height,
                Href = Href
            };

        internal override void OnLoaded()
        {
            base.OnLoaded();
            var generated = ResolveHref().DeepClone();
            generated.Parent = this;
            GeneratedElement = generated;
            generated.OnLoaded();
        }

        private SvgElement ResolveHref()
        {
            if (!Href.StartsWith("#"))
            {
                throw new NotSupportedException($"Reference '{Href}' is not supported");
            }
            var elementId = Href.Substring(1);
            var referenced = ParentSvg.FindElementById(elementId);
            if (referenced == this)
            {
                throw new Exception($"Self referencing element, id='{Href}'");
            }
            return referenced;
        }
    }
}